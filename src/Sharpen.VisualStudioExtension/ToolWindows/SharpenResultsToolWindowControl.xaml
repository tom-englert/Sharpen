<UserControl x:Class="Sharpen.VisualStudioExtension.ToolWindows.SharpenResultsToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:local="clr-namespace:Sharpen.VisualStudioExtension.ToolWindows.AnalysisResultTreeViewItems"
             mc:Ignorable="d"
             x:ClassModifier="internal">
    <xctk:BusyIndicator IsBusy="{Binding AnalysisIsRunning}"
                        DisplayAfter="00:00:01.00"
                        BusyContent="Analyzing code. Please wait..."
                        Foreground="{DynamicResource VsBrush.WindowText}"
                        Background="{DynamicResource VsBrush.Window}">
        <xctk:BusyIndicator.ProgressBarStyle>
            <!--
                The original styles are defined inside of a setter of setter of setter of... OMG!
                See it here:
                    https://github.com/xceedsoftware/wpftoolkit/blob/master/ExtendedWPFToolkitSolution/Src/Xceed.Wpf.Toolkit/BusyIndicator/Themes/Generic.xaml
                I have no clue how to reference those nested nested whatever style definitions in
                the BasedOn property. Nor I want to spend the rest of my life searching through
                StackOverflow posts that might help me.
                So I'm copying the original styles here below and extending and chaning them with my own.
            -->
            <Style TargetType="ProgressBar">
                <!-- Copied. -->
                <Setter Property="Height" Value="15" />
                <Setter Property="Margin" Value="8,0,8,8" />
                <!-- My stuff. -->
                <Setter Property="IsIndeterminate" Value="False" />
                <Setter Property="Minimum" Value="0" />
                <Setter Property="Maximum" Value="{Binding AnalysisMaximumProgress}" />
                <Setter Property="Value" Value="{Binding AnalysisCurrentProgress}" />
            </Style>
        </xctk:BusyIndicator.ProgressBarStyle>
        <xctk:BusyIndicator.OverlayStyle>
            <Style TargetType="Rectangle">
                <!-- Copied. -->
                <Setter Property="Opacity" Value="0.5" />
                <!-- My stuff. -->
                <Setter Property="Fill" Value="{DynamicResource VsBrush.Window}"/>
            </Style>
        </xctk:BusyIndicator.OverlayStyle>
        <Grid>
            <TreeView ItemsSource="{Binding AnalysisResults}"
                      Background="{DynamicResource VsBrush.Window}"
                      MouseDoubleClick="OnResultTreeViewMouseDoubleClick"
                      KeyUp="OnResultTreeViewKeyUp">
                <TreeView.Resources>
                  <!-- Override the colors used by the item container style with the VS colors. -->
                  <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveColorKey}}" />
                  <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemActiveTextColorKey}}" />
                  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveColorKey}}" />
                  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{DynamicResource {x:Static vsp:TreeViewColors.SelectedItemInactiveTextColorKey}}" />
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                        <Setter Property="Foreground" Value="{DynamicResource VsBrush.WindowText}" />
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>
                </TreeView.ItemContainerStyle>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="local:BaseTreeViewItem" 
                                              ItemsSource="{Binding Children}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Text}"  />
                            <TextBlock x:Name="NumberOfItems"
                                       Text="{Binding NumberOfItems, StringFormat=' {0}'}"
                                       FontStyle="Italic">
                            </TextBlock>
                            <TextBlock x:Name="LearnMore"
                                       Visibility="Collapsed">
                                <Run Text=" " />
                                <Hyperlink NavigateUri="{Binding LearnMoreUrl}" 
                                             RequestNavigate="OnLearnMoreRequestNavigate"
                                             Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=Foreground}"
                                             Focusable="False">
                                      <Run Text="{Binding LearnMoreDisplayText, Mode=OneWay}" />
                                  </Hyperlink>
                            </TextBlock>
                          </StackPanel>
                        <HierarchicalDataTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="LearnMore" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding LearnMoreUrl}" Value="{x:Null}">
                              <Setter TargetName="LearnMore" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding NumberOfItems}" Value="{x:Null}">
                              <Setter TargetName="NumberOfItems" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </HierarchicalDataTemplate.Triggers>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </Grid>
    </xctk:BusyIndicator>
</UserControl>